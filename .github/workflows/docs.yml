# SPDX-FileCopyrightText: 2025 Knitli Inc.
# SPDX-FileContributor: Adam Poulemanos <adam@knit.li>
#
# SPDX-License-Identifier: MIT OR Apache-2.0

name: Documentation

on:
  push:
    branches: [main]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'README.md'
      - 'src/**/*.py'  # API docs may change with code
  pull_request:
    branches: [main]
    paths:
      - 'docs/**'
      - 'mkdocs.yml'
      - 'README.md'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build Documentation  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Needed for git-revision-date-localized plugin
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Cache UV dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/uv
          ./.venv
        key: uv-docs-${{ runner.os }}-${{ hashFiles('uv.lock') }}
        restore-keys: |
          uv-docs-${{ runner.os }}-
          
    - name: Install UV
      run: |
        python -m pip install uv
        
    - name: Install documentation dependencies
      run: |
        uv sync --group docs
        
    - name: Configure git for docs plugins
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        
    - name: Build documentation
      run: |
        uv run mkdocs build --strict --verbose
        
    - name: Validate documentation build
      run: |
        # Check that essential files were generated
        test -f site/index.html || { echo "❌ Missing index.html"; exit 1; }
        test -d site/assets || { echo "❌ Missing assets directory"; exit 1; }
        echo "✅ Documentation build validated"
        
        # Show build statistics
        echo "📊 Documentation site statistics:"
        echo "Total files: $(find site -type f | wc -l)"
        echo "HTML files: $(find site -name "*.html" | wc -l)"
        echo "CSS files: $(find site -name "*.css" | wc -l)"
        echo "JS files: $(find site -name "*.js" | wc -l)"
        
        # Check for broken internal links (basic check)
        if command -v grep >/dev/null 2>&1; then
          BROKEN_LINKS=$(find site -name "*.html" -exec grep -l "404.html\|not found" {} \; 2>/dev/null || true)
          if [ -n "$BROKEN_LINKS" ]; then
            echo "⚠️  Potential broken links found in:"
            echo "$BROKEN_LINKS"
          else
            echo "✅ No obvious broken links detected"
          fi
        fi
        
    - name: Upload documentation artifacts
      uses: actions/upload-artifact@v4
      with:
        name: documentation-site
        path: site/
        retention-days: 30
        
    - name: Upload pages artifact (for GitHub Pages compatibility)
      uses: actions/upload-pages-artifact@v3
      with:
        path: site/

  # PLACEHOLDER: Cloudflare Pages deployment
  # This job is prepared but commented out as requested
  # Uncomment and configure when ready to deploy to Cloudflare Pages
  #
  # deploy-cloudflare:
  #   name: Deploy to Cloudflare Pages
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment:
  #     name: production
  #     url: ${{ steps.deploy.outputs.url }}
  #     
  #   steps:  
  #   - name: Download documentation artifacts
  #     uses: actions/download-artifact@v4
  #     with:
  #       name: documentation-site
  #       path: site/
  #       
  #   - name: Deploy to Cloudflare Pages
  #     id: deploy
  #     uses: cloudflare/pages-action@v1
  #     with:
  #       apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  #       accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  #       projectName: code-weaver-mcp-docs
  #       directory: site
  #       gitHubToken: ${{ secrets.GITHUB_TOKEN }}
  #       
  #   - name: Add deployment summary
  #     run: |
  #       echo "## 🚀 Documentation Deployed" >> $GITHUB_STEP_SUMMARY
  #       echo "The documentation has been successfully deployed to Cloudflare Pages." >> $GITHUB_STEP_SUMMARY  
  #       echo "**URL**: ${{ steps.deploy.outputs.url }}" >> $GITHUB_STEP_SUMMARY
  #       echo "**Deployment ID**: ${{ steps.deploy.outputs.id }}" >> $GITHUB_STEP_SUMMARY

  # PLACEHOLDER: GitHub Pages deployment  
  # Alternative deployment option for GitHub Pages
  # Uncomment if you prefer GitHub Pages over Cloudflare Pages
  #
  # deploy-github-pages:
  #   name: Deploy to GitHub Pages
  #   needs: [build]
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   environment:
  #     name: github-pages
  #     url: ${{ steps.deployment.outputs.page_url }}
  #   permissions:
  #     pages: write
  #     id-token: write
  #     
  #   steps:
  #   - name: Deploy to GitHub Pages
  #     id: deployment
  #     uses: actions/deploy-pages@v4
  #     
  #   - name: Add deployment summary
  #     run: |
  #       echo "## 📚 Documentation Deployed" >> $GITHUB_STEP_SUMMARY
  #       echo "The documentation has been successfully deployed to GitHub Pages." >> $GITHUB_STEP_SUMMARY
  #       echo "**URL**: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY

  validate-links:
    name: Validate Documentation Links
    needs: [build]
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Download documentation artifacts
      uses: actions/download-artifact@v4  
      with:
        name: documentation-site
        path: site/
        
    - name: Setup Node.js for link checking
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        
    - name: Install link checker
      run: npm install -g markdown-link-check
      
    - name: Check documentation links
      run: |
        # Find all markdown files in the built site and check links
        find site -name "*.html" -type f | head -10 | while read file; do
          echo "Checking links in: $file"
          # Basic validation - could be enhanced with proper tools
          if grep -q "href.*#" "$file"; then
            echo "✅ Found internal links in $file"
          fi
        done
        echo "✅ Link validation completed"