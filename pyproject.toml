# SPDX-FileCopyrightText: 2025 Knitli Inc.
# SPDX-FileContributor: Adam Poulemanos <adam@knit.li>
#
# SPDX-License-Identifier: MIT OR Apache-2.0

[project]
authors = [
    { name = "Knitli Inc." },
    { name = "Adam Poulemanos", email = "adam@knit.li" },
]
name = "codeweaver-mcp"
license = { text = "MIT OR Apache-2.0" }

classifiers = [
    "Development Status :: 4 - Beta",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "License :: OSI Approved :: MIT License",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Information Analysis",
    "Topic :: Text Processing :: Indexing",
    "Topic :: Utilities",
    "Typing :: Typed",
]

dynamic = ["version"]
description = "Extensible MCP server for semantic code search with plugin architecture supporting multiple embedding providers, vector databases, and data sources."
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.11"
dependencies = [
    "ast-grep-py>=0.39.1",
    "cyclopts>=3.22.5",
    "fastmcp>=2.10.6",
    "posthog>=6.3.0",
    "pydantic-ai>=0.6.2",
    "pydantic-settings>=2.10.1",
    "pydantic>=2.11.7",
    "qdrant-client>=1.15.0",
    "rich>=14.0.0",
    "rignore>=0.6.4",
    "spacy>=3.8.7",
    "tiktoken>=0.1.0",
    "tomli-w>=1.2.0",
    "voyageai>=0.3.4",
    "watchfiles>=1.1.0",
]
keywords = [
    "ai",
    "artificial intelligence",
    "ast-grep",
    "claude",
    "code analysis",
    "code embeddings",
    "code indexing",
    "code intelligence",
    "code search",
    "code understanding",
    "codebase analysis",
    "codebase management",
    "codebase",
    "cohere",
    "docarray",
    "extensible",
    "fastmcp",
    "framework",
    "huggingface",
    "large language models",
    "llms",
    "mcp protocol",
    "mcp server",
    "mcp",
    "model context protocol",
    "natural language processing",
    "nlp",
    "openai",
    "platform",
    "plugin architecture",
    "pydantic",
    "qdrant",
    "search",
    "semantic search",
    "sentence-transformers",
    "spacy",
    "vector search",
    "voyageai",
]


[project.scripts]
codeweaver = "codeweaver.cli.app:main"

[project.urls]
Changelog = "https://github.com/knitli/codeweaver-mcp/blob/main/CHANGELOG.md"
Documentation = "https://dev.knitli.com/codeweaver"
Homepage = "https://dev.knitli.com"
Issues = "https://github.com/knitli/codeweaver-mcp/issues"
Repository = "https://github.com/knitli/codeweaver-mcp"

[build-system]
requires = ["hatchling>=1.14.1", "uv-dynamic-versioning>=0.7.0"]
build-backend = "hatchling.build"

[dependency-groups]
build = ["hatchling>=1.14.1", "uv-dynamic-versioning>=0.7.0"]
test = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "httpx>=0.28.1",
    "pytest-env>=1.1.5",
    "pytest-flakefinder>=1.1.0",
    "pytest-httpx>=0.35.0",
    "pytest-report>=0.2.1",
    "pytest-timeout>=2.4.0",
    "dirty-equals>=0.9.0",
    "pdbpp>=0.11.7",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-git-revision-date-localized-plugin>=1.3.0",
    "mkdocs-material>=9.6.15",
    "mkdocs-redirects>=1.0.0",
    "mkdocstrings[python]>=0.30.0",
    "mkdocs-gen-files>=0.5.0",
    "mkdocs-minify-plugin>=0.8.0",
    "mkdocs-rss-plugin==1.17.3",
    "mkdocs-awesome-nav>=3.1.2",
    "pymdown-extensions>=10.16.1",
    "pygments>=2.19.1",
]
dev = [
    "ruff>=0.12.4",
    "superclaude>=3.0.0.2",
    "uv>=0.8.2,<0.9.0",
    "ipython>=9.4.0",
    "jsonlines>=4.0.0",
    "copychat>=0.7.2",
    "pdbpp>=0.11.7",
    "pyperclip>=1.9.0",
    "pydantic-ai>=0.6.2",
    "pyright>=1.1.403",
]

[project.optional-dependencies]

recommended = [
    "ast-grep-py>=0.39.1",
    "cyclopts>=3.22.5",
    "fastmcp>=2.10.6",
    "posthog>=6.3.0",
    "pydantic-settings>=2.10.1",
    "pydantic>=2.11.7",
    "qdrant-client>=1.15.0",
    "rich>=14.0.0",
    "rignore>=0.6.4",
    "tomli-w>=1.2.0",
    "tiktoken>=0.1.0",
    "voyageai>=0.3.4",
    "watchfiles>=1.1.0",
]

recommended-no-telemetry = [
    "ast-grep-py>=0.39.1",
    "cyclopts>=3.22.5",
    "fastmcp>=2.10.6",
    "posthog>=6.3.0",
    "pydantic-settings>=2.10.1",
    "pydantic>=2.11.7",
    "qdrant-client>=1.15.0",
    "rich>=14.0.0",
    "rignore>=0.6.4",
    "spacy>=3.8.7",
    "tiktoken>=0.1.0",
    "tomli-w>=1.2.0",
    "voyageai>=0.3.4",
    "watchfiles>=1.1.0",
]

# Absolute bare minimum to run CodeWeaver
# This is the minimum set of dependencies required to run CodeWeaver without any additional features or providers. No CLI, no telemetry, no advanced features.
minimal = [
    "ast-grep-py>=0.39.1",
    "qdrant-client>=1.15.0",
    "voyageai>=0.3.4",
    "fastmcp>=2.10.6",
    "pydantic-settings>=2.10.1",
    "pydantic-ai>=0.6.2",
    "pydantic>=2.11.7",
    "qdrant-client>=1.15.0",
    "rignore>=0.6.4",
]

cli = [
    "ast-grep-py>=0.39.1",
    "cyclopts>=3.22.5",
    "fastmcp>=2.10.6",
    "rich>=14.0.0",
    "tiktoken>=0.1.0",
    "tomli-w>=1.2.0",
    "pydantic-settings>=2.10.1",
    "pydantic>=2.11.7",
    "rignore>=0.6.4",
    "watchdog>=6.0.0",
]

# ==== Providers ====
provider-cohere = ["pydantic-ai-slim[cohere]>=0.6.2"]
provider-openai = ["openai>=1.98.0"]
provider-huggingface = ["huggingface-hub>=0.34.3"]
provider-sentence_transformers = ["sentence-transformers>=5.0.0"]
provider-nlp-spacy = ["spacy>=3.8.7"]
provider-nlp-spacy-transformers = [
    "spacy>=3.8.7",
    "spacy-curated-transformers>=0.3.1",
]
provider-voyageai = ["voyageai>=0.3.4"]

# ==== Sources ====

source-filesystem = ["watchdog>=6.0.0"]

# Not fully implemented:
# source-sqlmodel = ["sqlmodel>=0.0.24"]
# source-git = ["gitpython>=3.1.45"]
# source-github = ["PyGithub>=2.7.0"]
# source-web = ["httpx>=0.28.1"]


# ==== Authentication and Authorization Middleware ====
# Optional middleware to add authentication and authorization capabilities to the CodeWeaver server.
# This allows you to secure your CodeWeaver instance with various authentication providers and authorization policies.
# The middleware can be used to enforce access control policies, authenticate users, and manage permissions.

# TODO: Implement authentication and authorization middleware -- should be simple to add
# permit.io middleware - see https://gofastmcp.com/integrations/permit
auth-permitio = ["permit-fastmcp>=0.1.1"]

# eunomia middleware - see https://gofastmcp.com/integrations/eunomia-authorization
auth-eunomia = ["eunomia-mcp>=0.3.9"]

# workos AuthKit middleware - see https://gofastmcp.com/integrations/authkit
# No additional dependencies required, it's purely REST-based.
# Enable with environment variables:
#  ## Instruct FastMCP to use the AuthKit provider:
#    FASTMCP_SERVER_AUTH=AUTHKIT

#     configure the AuthKit provider
#     FASTMCP_SERVER_AUTH_AUTHKITPROVIDER_AUTHKIT_DOMAIN="https://your-project-12345.authkit.app"
#     FASTMCP_SERVER_AUTH_AUTHKITPROVIDER_BASE_URL="http://localhost:8000"

[tool.uv-dynamic-versioning]
vcs = "git"
style = "semver"
bump = true
fallback-version = "0.0.0"

[tool.hatch.version]
source = "uv-dynamic-versioning"

[tool.hatch.build.targets.wheel]
artifacts = ["*.so", "src/**"]
packages = ["src/codeweaver"]

[tool.hatch.build.targets.sdist]
include = [
    "src/**",
    "pyproject.toml",
    "README.md",
    "CHANGELOG.md",
    "LICENSE-MIT",
    "LICENSE-APACHE-2.0",
]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=codeweaver",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    # Test categories
    "unit: Unit tests that test individual components in isolation",
    "integration: Integration tests that test component interactions",
    "validation: Validation tests that ensure system consistency",
    "e2e: End-to-end tests that test complete workflows",

    # Performance & benchmarks
    "benchmark: Performance benchmark tests",
    "slow: Tests that take a significant amount of time to run",
    "performance: Performance-related tests",

    # External dependencies
    "network: Tests that require network access",
    "external_api: Tests that interact with external APIs",
    "voyageai: Tests that require VoyageAI API access",
    "qdrant: Tests that require Qdrant vector database",

    # Configuration & environment
    "config: Configuration-related tests",
    "env_vars: Tests that depend on environment variables",
    "mock_only: Tests that only use mocked dependencies",

    # Feature-specific
    "embeddings: Tests related to embedding functionality",
    "search: Tests related to search functionality",
    "indexing: Tests related to code indexing",
    "telemetry: Tests related to telemetry and metrics",
    "mcp: Tests related to MCP protocol functionality",
    "services: Tests related to services layer",

    # Test types
    "parametrize: Parametrized tests with multiple test cases",
    "fixtures: Tests that heavily rely on pytest fixtures",
    "async_test: Asynchronous tests (in addition to pytest.mark.asyncio)",

    # Stability & reliability
    "flaky: Tests that may occasionally fail due to timing or external factors",
    "timeout: Tests with specific timeout requirements",
    "retry: Tests that may need retries",

    # Development & debugging
    "debug: Tests for debugging purposes",
    "dev_only: Tests that should only run in development",
    "skip_ci: Tests to skip in CI/CD environments",
]
asyncio_mode = "auto"
timeout = 300
timeout_method = "thread"

[tool.pyright]
strict = ["src/codeweaver/**/*.py"]
include = ["src/codeweaver/**/*.py", "tests/**/*.py", "scripts/**/*.py"]
exclude = [
    "src/codeweaver/parsers/**/*.py",
    ".venv/**",
    "dist/**",
    "build/**",
    "docs/**",
    "tests/data/**",
]
autoImportCompletions = true
deprecateTypingAliases = true
pythonPlatform = "Linux"
pythonVersion = "3.11"
reportCallnDefaultInitializer = "information"
reportImplicitStringConcatenation = "error"
reportImportCycles = "warning"
reportPropertyTypeMismatch = "error"
reportShadowedImports = "error"
reportUninitializedInstanceVariable = "information"
reportUnusedCallResult = "information"
strictDictionaryInference = true
strictListInference = true
strictParameterNoneValue = true
strictSetInference = true
venvPath = ".venv"
# we use standard for internal scripts and tooling,
# the `strict` parameter above sets strict for the main codebase
typeCheckingMode = "standard"
