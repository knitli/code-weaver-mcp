# SPDX-FileCopyrightText: 2025 Knitli Inc.
# SPDX-FileContributor: Adam Poulemanos <adam@knit.li>
#
# SPDX-License-Identifier: MIT OR Apache-2.0

[project]
authors = [
    { name = "Knitli Inc.", email = "knitli@knit.li" },
    { name = "Adam Poulemanos", email = "adam@knit.li" },
]
name = "codeweaver"
license = { text = "MIT OR Apache-2.0" }
keywords = [
    "code-indexing",
    "code-search",
    "ast-grep",
    "qdrant",
    "mcp",
    "plugin",
    "middleware",
    "voyageai",
    "code-embeddings",
    "semantic-search",
    "tree-sitter",
]

version = "0.1.0"
description = "Extensible MCP server for semantic code search with plugin architecture supporting multiple embedding providers, vector databases, and data sources."
readme = "README.md"
requires-python = ">=3.11"
dependencies = [
    "ast-grep-py>=0.39.1",
    "fastmcp>=2.10.6",
    "qdrant-client>=1.15.0",
    "rignore>=0.6.4",
    "watchdog>=6.0.0",
    "voyageai>=0.3.4",
    "pydantic>=2.11.7",
    "pydantic-settings>=2.10.1",
    "rich>=14.0.0",
    "posthog>=6.3.0",
]


[project.scripts]
code-weaver = "code_weaver:main"

[build-system]
requires = ["uv_build>=0.8.2,<0.9.0"]
build-backend = "uv_build"

[dependency-groups]
test = [
    "docarray>=0.40.1",
    "pytest>=8.4.1",
    "pytest-asyncio>=1.1.0",
    "pytest-cov>=6.2.1",
    "pytest-mock>=3.14.1",
    "httpx>=0.28.1",
    "pytest-env>=1.1.5",
    "pytest-flakefinder>=1.1.0",
    "pytest-httpx>=0.35.0",
    "pytest-report>=0.2.1",
    "pytest-timeout>=2.4.0",
]
docs = [
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.15",
    "mkdocs-redirects>=1.0.0",
    "mkdocs-minify-plugin>=0.8.0",
    "mkdocs-awesome-pages-plugin>=2.10.0",
    "mkdocs-material-extensions>=1.2.0",
    "pymdown-extensions>=10.1",
]
dev = [
    "ruff>=0.12.4",
    "superclaude>=3.0.0.2",
    "uv_build>=0.8.2,<0.9.0",
    "uv>=0.8.2,<0.9.0",
    "ipython>=9.4.0",
]
typing = ["pylance>=0.32.0"]

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=codeweaver",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]
markers = [
    # Test categories
    "unit: Unit tests that test individual components in isolation",
    "integration: Integration tests that test component interactions",
    "validation: Validation tests that ensure system consistency",
    "e2e: End-to-end tests that test complete workflows",

    # Performance & benchmarks
    "benchmark: Performance benchmark tests",
    "slow: Tests that take a significant amount of time to run",
    "performance: Performance-related tests",

    # External dependencies
    "network: Tests that require network access",
    "external_api: Tests that interact with external APIs",
    "voyageai: Tests that require VoyageAI API access",
    "qdrant: Tests that require Qdrant vector database",

    # Configuration & environment
    "config: Configuration-related tests",
    "env_vars: Tests that depend on environment variables",
    "mock_only: Tests that only use mocked dependencies",

    # Feature-specific
    "embeddings: Tests related to embedding functionality",
    "search: Tests related to search functionality",
    "indexing: Tests related to code indexing",
    "telemetry: Tests related to telemetry and metrics",
    "mcp: Tests related to MCP protocol functionality",
    "services: Tests related to services layer",

    # Test types
    "parametrize: Parametrized tests with multiple test cases",
    "fixtures: Tests that heavily rely on pytest fixtures",
    "async_test: Asynchronous tests (in addition to pytest.mark.asyncio)",

    # Stability & reliability
    "flaky: Tests that may occasionally fail due to timing or external factors",
    "timeout: Tests with specific timeout requirements",
    "retry: Tests that may need retries",

    # Development & debugging
    "debug: Tests for debugging purposes",
    "dev_only: Tests that should only run in development",
    "skip_ci: Tests to skip in CI/CD environments",
]
asyncio_mode = "auto"
timeout = 300
timeout_method = "thread"
