# ruff: noqa
# sourcery skip
# type: ignore
"""This type stub file was generated by pyright."""

from ._py2 import *
from ._py3 import *

__all__ = [
    "PY2",
    "PY2_6",
    "PY3",
    "PY3_3",
    "PY3_4",
    "PY3_5",
    "PY3_6",
    "PY3_7",
    "PY3_11",
    "Member",
    "NonMember",
    "NoneType",
    "OrderedDict",
    "_Addendum",
    "_abs_",
    "_add_",
    "_and_",
    "_floordiv_",
    "_inv_",
    "_lshift_",
    "_mod_",
    "_mul_",
    "_neg_",
    "_or_",
    "_pos_",
    "_pow_",
    "_rshift_",
    "_sub_",
    "_truediv_",
    "_value",
    "_xor_",
    "baseinteger",
    "basestring",
    "bltin_property",
    "constant",
    "get_attr_from_chain",
    "is_descriptor",
    "is_dunder",
    "is_internal_class",
    "is_private_name",
    "is_sunder",
    "long",
    "make_class_unpicklable",
    "member",
    "nonmember",
    "pyver",
    "skip",
    "undefined",
    "unicode",
]
pyver = ...
PY2 = ...
PY3 = ...
PY2_6 = ...
PY3_3 = ...
PY3_4 = ...
PY3_5 = ...
PY3_6 = ...
PY3_7 = ...
PY3_11 = ...
if PY2: ...
if PY3: ...
bltin_property = property
unicode = ...
basestring = ...
baseinteger = ...
long = ...
baseint = ...

class undefined:
    def __repr__(self):  # -> Literal['undefined']:
        ...
    def __bool__(self):  # -> Literal[False]:
        ...

    __nonzero__ = ...

undefined = ...

class _Addendum:
    def __init__(self, dict, doc, ns) -> None: ...
    def __call__(
        self, func
    ):  # -> staticmethod[Callable[..., Any], Any] | classmethod[Any, Callable[..., Any], Any] | property:
        ...
    def __getitem__(self, name): ...
    def __setitem__(self, name, value):  # -> None:
        ...
    def resolve(self):  # -> Any:
        ...

def is_descriptor(obj):  # -> bool:
    ...
def is_dunder(name):  # -> Literal[False]:
    ...
def is_sunder(name):  # -> Literal[False]:
    ...
def is_internal_class(cls_name, obj):  # -> Any | Literal[False]:
    ...
def is_private_name(cls_name, name):  # -> Match[str] | None:
    ...
def get_attr_from_chain(cls, attr):  # -> None:
    ...

class constant:
    def __init__(self, value, doc=...) -> None: ...
    def __get__(self, *args):  # -> Any:
        ...
    def __repr__(self):  # -> str:
        ...
    def __and__(self, other):  # -> Any:
        ...
    def __rand__(self, other):  # -> Any:
        ...
    def __invert__(self): ...
    def __or__(self, other):  # -> Any:
        ...
    def __ror__(self, other):  # -> Any:
        ...
    def __xor__(self, other):  # -> Any:
        ...
    def __rxor__(self, other):  # -> Any:
        ...
    def __abs__(self): ...
    def __add__(self, other):  # -> Any:
        ...
    def __radd__(self, other):  # -> Any:
        ...
    def __neg__(self): ...
    def __pos__(self): ...

    if PY2:
        def __div__(self, other): ...

    def __rdiv__(self, other): ...
    def __floordiv__(self, other):  # -> Any:
        ...
    def __rfloordiv__(self, other):  # -> Any:
        ...
    def __truediv__(self, other):  # -> Any:
        ...
    def __rtruediv__(self, other):  # -> Any:
        ...
    def __lshift__(self, other):  # -> Any:
        ...
    def __rlshift__(self, other):  # -> Any:
        ...
    def __rshift__(self, other):  # -> Any:
        ...
    def __rrshift__(self, other):  # -> Any:
        ...
    def __mod__(self, other):  # -> Any:
        ...
    def __rmod__(self, other):  # -> Any:
        ...
    def __mul__(self, other):  # -> Any:
        ...
    def __rmul__(self, other):  # -> Any:
        ...
    def __pow__(self, other):  # -> Any:
        ...
    def __rpow__(self, other):  # -> Any:
        ...
    def __sub__(self, other):  # -> Any:
        ...
    def __rsub__(self, other):  # -> Any:
        ...
    def __set_name__(self, ownerclass, name):  # -> None:
        ...

def make_class_unpicklable(obj):  # -> None:
    ...

class NonMember:
    def __init__(self, value) -> None: ...
    def __get__(self, instance, ownerclass=...):  # -> Any:
        ...

nonmember = skip = NonMember

class Member:
    def __init__(self, value) -> None: ...

member = Member
