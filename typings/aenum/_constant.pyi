# ruff: noqa
# sourcery skip
# type: ignore
"""
This type stub file was generated by pyright.
"""

from ._common import *

__all__ = ["NamedConstant", "Constant"]
NamedConstant = ...

class NamedConstantDict(dict):
    """Track constant order and ensure names are not reused.

    NamedConstantMeta will use the names found in self._names as the
    Constant names.
    """
    def __init__(self) -> None: ...
    def __setitem__(self, key, value):  # -> None:
        """Changes anything not dundered or not a constant descriptor.

        If an constant name is used twice, an error is raised; duplicate
        values are not checked for.

        Single underscore (sunder) names are reserved.
        """
        ...

class NamedConstantMeta(type):
    """
    Block attempts to reassign NamedConstant attributes.
    """
    @classmethod
    def __prepare__(metacls, cls, bases, **kwds):  # -> NamedConstantDict:
        ...
    def __new__(metacls, cls, bases, clsdict):  # -> Self:
        ...
    def __bool__(cls):  # -> Literal[True]:
        ...
    def __delattr__(cls, attr):  # -> None:
        ...
    def __iter__(cls):  # -> Generator[Any, None, None]:
        ...
    def __reversed__(cls):  # -> Generator[Any, None, None]:
        ...
    def __len__(cls):  # -> int:
        ...

    __nonzero__ = ...
    def __setattr__(cls, name, value):  # -> None:
        """Block attempts to reassign NamedConstants."""
        ...

constant_dict = ...

@constant_dict
def __new__(cls, name, value=..., doc=...):  # -> type:
    ...
@constant_dict
def __repr__(self):  # -> LiteralString:
    ...
@constant_dict
def __reduce_ex__(self, proto):  # -> tuple[Callable[..., Any], tuple[Any, Any]]:
    ...

NamedConstant = ...
Constant = NamedConstant
