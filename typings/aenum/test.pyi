# ruff: noqa
# sourcery: skip
# type: ignore
"""This type stub file was generated by pyright."""

import aenum
import unittest
import threading
from aenum import (
    AddValueEnum,
    AutoNumberEnum,
    Enum,
    EnumMeta,
    Flag,
    IntEnum,
    IntFlag,
    LowerStrEnum,
    MultiValueEnum,
    NamedConstant,
    NamedTuple,
    OrderedEnum,
    PY2,
    PY3,
    PY3_7,
    ReprEnum,
    StrEnum,
    UniqueEnum,
    UpperStrEnum,
    nonmember,
    pyver,
    skip,
    unique,
)
from datetime import timedelta

if PY2: ...
MODULE = ...
SHORT_MODULE = ...

def load_tests(loader, tests, ignore): ...

class TestCase(unittest.TestCase):
    def __init__(self, *args, **kwds) -> None: ...

class Stooges(Enum):
    LARRY = ...
    CURLY = ...
    MOE = ...

class IntStooges(int, Enum):
    LARRY = ...
    CURLY = ...
    MOE = ...

class FloatStooges(float, Enum):
    LARRY = ...
    CURLY = ...
    MOE = ...

class FlagStooges(Flag):
    LARRY = ...
    CURLY = ...
    MOE = ...
    PMASK = ...
    CMASK = ...

class FlagStoogesWithZero(Flag):
    NOFLAG = ...
    LARRY = ...
    CURLY = ...
    MOE = ...
    PMASK = ...
    CMASK = ...

class IntFlagStooges(IntFlag):
    LARRY = ...
    CURLY = ...
    MOE = ...
    PMASK = ...
    CMASK = ...

class IntFlagStoogesWithZero(IntFlag):
    NOFLAG = ...
    LARRY = ...
    CURLY = ...
    MOE = ...
    PMASK = ...
    CMASK = ...

LifeForm = ...

class DeathForm(NamedTuple):
    color = ...
    rigidity = ...
    odor = ...

class Name(StrEnum):
    BDFL = ...
    FLUFL = ...

Question = ...
Answer = ...

class WhatsIt(NamedTuple):
    def what(self): ...

class ThatsIt(WhatsIt):
    blah = ...
    bleh = ...

class Fruit(Enum):
    tomato = ...
    banana = ...
    cherry = ...

def test_pickle_dump_load(assertion, source, target=..., protocol=...):  # -> None:
    ...
def test_pickle_exception(assertion, exception, obj, protocol=...):  # -> None:
    ...

if PY3: ...
if pyver >= PY3_7: ...

class classproperty:
    def __init__(self, fget=..., fset=..., fdel=..., doc=...) -> None: ...
    def __get__(self, instance, ownerclass): ...

class TestOrder(TestCase):
    """
    Test _order_ extra/missing members.
    """
    def test_same_members(self):  # -> None:
        class Color(Enum): ...

    def test_same_members_with_aliases(self):  # -> None:
        class Color(Enum): ...

    def test_order_has_extra_members(self):  # -> None:
        ...
    def test_order_has_extra_members_with_aliases(self):  # -> None:
        ...
    def test_enum_has_extra_members(self):  # -> None:
        ...
    def test_enum_has_extra_members_with_aliases(self):  # -> None:
        ...
    def test_same_members_flag(self):  # -> None:
        class Color(Flag): ...

    def test_same_members_with_aliases_flag(self):  # -> None:
        class Color(Flag): ...

    def test_order_has_extra_members_flag(self):  # -> None:
        ...
    def test_order_has_extra_members_with_aliases_flag(self):  # -> None:
        ...
    def test_enum_has_extra_members_flag(self):  # -> None:
        ...
    def test_enum_has_extra_members_with_aliases_flag(self):  # -> None:
        ...

class TestAutoValue(TestCase):
    def test_bare(self):  # -> None:
        class BareEnum(Enum): ...
        class BareIntEnum(IntEnum): ...
        class BareFlag(Flag): ...
        class BareIntFlag(IntFlag): ...

    def test_init_only_final(self):  # -> None:
        class InitEnumValue(Enum): ...
        class InitEnum(Enum): ...
        class InitIntEnum(IntEnum): ...
        class InitFlag(Flag): ...
        class InitIntFlag(IntFlag): ...

    def test_init_only_inherit(self):  # -> None:
        class InitInheritEnum(Enum): ...
        class InitEnum(InitInheritEnum): ...
        class InitInheritValueEnum(Enum): ...
        class InitEnum(InitInheritValueEnum): ...
        class InitIntEnum(int, InitInheritValueEnum): ...
        class InitInheritValueFlag(Flag): ...
        class InitFlag(InitInheritValueFlag): ...
        class InitIntFlag(int, InitInheritValueFlag): ...

    def test_new_only_final(self):  # -> None:
        class NewFinalEnum(Enum): ...
        class NewFinalIntEnum(IntEnum): ...
        class NewFinalFlag(Flag): ...
        class NewFinalIntFlag(IntFlag): ...
        class NewFinalStrEnum(str, Enum): ...
        class NewFinalStrFlag(str, Flag): ...

    def test_new_only_inherited(self):  # -> None:
        class NewInheritEnum(Enum): ...
        class NewFinalEnum(NewInheritEnum): ...
        class NewFinalIntEnum(int, NewInheritEnum): ...
        class NewInheritFlag(Flag): ...
        class NewFinalFlag(NewInheritFlag): ...
        class NewFinalIntFlag(int, NewInheritFlag): ...

    def test_init_new_only(self):  # -> None:
        class InitNewEnum(Enum): ...
        class InitNewIntEnum(IntEnum): ...
        class InitNewFlag(Flag): ...
        class InitNewIntFlag(IntFlag): ...

    def test_init_new_inherit(self):  # -> None:
        class InitNew(Enum): ...
        class InitNewEnum(InitNew): ...
        class InitNewInt(Enum): ...
        class InitNewIntEnum(int, InitNewInt): ...
        class InitNewFlagBase(Flag): ...
        class InitNewFlag(InitNewFlagBase): ...
        class InitNewIntFlagBase(int, Flag): ...
        class InitNewIntFlag(InitNewIntFlagBase): ...

class TestHelpers(TestCase):
    def test_is_descriptor(self):  # -> None:
        class foo: ...

    def test_is_sunder(self):  # -> None:
        ...
    def test_is_dunder(self):  # -> None:
        ...
    def test_auto(self):  # -> None:
        ...
    def test_constant(self):  # -> None:
        ...

class TestEnumType(TestCase):
    def test_immutability(self):  # -> None:
        class Hah: ...
        class Huh(Hah, Enum): ...

    def test_enum_shadow_base(self):  # -> None:
        class hohum: ...
        class Color(hohum, Enum): ...

class TestEnum(TestCase):
    def setUp(self):  # -> None:
        class Season(Enum): ...
        class ReprKonstants(float, ReprEnum): ...
        class ReprGrades(IntEnum): ...
        class ReprDirectional(str, ReprEnum): ...
        class ReprHoliday(date, ReprEnum): ...
        class Konstants(float, Enum): ...
        class Grades(int, Enum): ...
        class Directional(str, Enum): ...
        class Holiday(date, Enum): ...

    def test_set_name(self):  # -> None:
        class Descriptor: ...
        class AnEnum(Enum): ...

    def test_private_names(self):  # -> None:
        class Private(Enum): ...

    def test_new_with_keywords(self):  # -> None:
        class Huh(IntEnum): ...

    def test_members_is_ordereddict_if_ordered(self):  # -> None:
        class Ordered(Enum): ...

    def test_members_is_ordereddict_if_not_ordered(self):  # -> None:
        class Unordered(Enum): ...

    def test_enum_in_enum_out(self):  # -> None:
        ...
    def test_enum_value(self):  # -> None:
        ...
    def test_intenum_value(self):  # -> None:
        ...
    def test_enum(self):  # -> None:
        ...
    def test_enum_helper(self):  # -> None:
        ...
    def test_enum_in_enum(self):  # -> None:
        class Level(Enum): ...

    def test_value_name(self):  # -> None:
        ...
    def test_attribute_deletion(self):  # -> None:
        class Season(Enum): ...

    def test_bool_of_class(self):  # -> None:
        class Empty(Enum): ...

    def test_bool_of_member(self):  # -> None:
        class Count(Enum): ...

    def test_invalid_names(self):  # -> None:
        ...
    def test_bool(self):  # -> None:
        class Logic(Enum): ...

    def test_contains(self):  # -> None:
        class OtherEnum(Enum): ...
        class NumericEnum(IntEnum): ...
        class Wierd(Enum): ...

    def test_member_contains(self):  # -> None:
        ...
    def test_format_enum(self):  # -> None:
        ...
    def test_custom_format(self):  # -> None:
        class TestFloat(float, Enum): ...

    def test_format_with_custom_str(self):  # -> None:
        class TestInt(int, Enum): ...

    def assertFormatIsName(self, spec, member):  # -> None:
        ...
    def test_format_enum_date(self):  # -> None:
        ...
    def test_format_enum_float(self):  # -> None:
        ...
    def test_format_enum_int(self):  # -> None:
        ...
    def test_format_enum_str(self):  # -> None:
        ...
    def assertFormatIsValue(self, spec, member):  # -> None:
        ...
    def test_format_reprenum_date(self):  # -> None:
        ...
    def test_format_reprenum_float(self):  # -> None:
        ...
    def test_format_reprenum_int(self):  # -> None:
        ...
    def test_format_reprenum_str(self):  # -> None:
        ...
    def test_hash(self):  # -> None:
        ...
    def test_enum_duplicates(self):  # -> None:
        class Season(Enum): ...

    def test_enum_with_value_name(self):  # -> None:
        class Huh(Enum): ...

    def test_intenum_from_scratch(self):  # -> None:
        class phy(int, Enum): ...

    def test_intenum_inherited(self):  # -> None:
        class IntEnum(int, Enum): ...
        class phy(IntEnum): ...

    def test_floatenum_from_scratch(self):  # -> None:
        class phy(float, Enum): ...

    def test_floatenum_inherited(self):  # -> None:
        class FloatEnum(float, Enum): ...
        class phy(FloatEnum): ...

    def test_strenum_from_scratch(self):  # -> None:
        class phy(str, Enum): ...

    def test_intenum(self):  # -> None:
        class WeekDay(IntEnum): ...

    def test_intenum_duplicates(self):  # -> None:
        class WeekDay(IntEnum): ...

    def test_floatenum_fromhex(self):  # -> None:
        ...
    def test_pickle_enum(self):  # -> None:
        ...
    def test_pickle_int(self):  # -> None:
        ...
    def test_pickle_float(self):  # -> None:
        ...
    def test_pickle_enum_function(self):  # -> None:
        ...
    def test_pickle_enum_function_with_module(self):  # -> None:
        ...
    def test_pickle_by_name(self):  # -> None:
        class ReplaceGlobalInt(IntEnum): ...

    def test_exploding_pickle(self):  # -> None:
        ...
    def test_string_enum(self):  # -> None:
        class SkillLevel(str, Enum): ...

    def test_getattr_getitem(self):  # -> None:
        class Period(Enum): ...

    def test_getattr_dunder(self):  # -> None:
        ...
    def test_iteration_order(self):  # -> None:
        class Season(Enum): ...

    def test_iteration_order_reversed(self):  # -> None:
        ...
    def test_iteration_order_with_unorderable_values(self):  # -> None:
        class Complex(Enum): ...

    def test_programatic_function_string(self):  # -> None:
        ...
    def test_programatic_function_string_with_start(self):  # -> None:
        ...
    def test_programatic_function_string_list(self):  # -> None:
        ...
    def test_programatic_function_string_list_with_start(self):  # -> None:
        ...
    def test_programatic_function_iterable(self):  # -> None:
        ...
    def test_programatic_function_from_dict(self):  # -> None:
        ...
    def test_programatic_function_type(self):  # -> None:
        ...
    def test_programatic_function_type_with_start(self):  # -> None:
        ...
    def test_programatic_function_type_from_subclass(self):  # -> None:
        ...
    def test_programatic_function_type_from_subclass_with_start(self):  # -> None:
        ...
    def test_programatic_function_unicode(self):  # -> None:
        ...
    def test_programatic_function_unicode_list(self):  # -> None:
        ...
    def test_programatic_function_unicode_iterable(self):  # -> None:
        ...
    def test_programatic_function_from_unicode_dict(self):  # -> None:
        ...
    def test_programatic_function_unicode_type(self):  # -> None:
        ...
    def test_programatic_function_unicode_type_from_subclass(self):  # -> None:
        ...
    def test_programmatic_function_unicode_class(self):  # -> None:
        ...
    def test_subclassing(self):  # -> None:
        ...
    def test_extending(self):  # -> None:
        ...
    def test_exclude_methods(self):  # -> None:
        class whatever(Enum): ...

    def test_wrong_inheritance_order(self):  # -> None:
        ...
    def test_intenum_transitivity(self):  # -> None:
        class number(IntEnum): ...
        class numero(IntEnum): ...

    def test_introspection(self):  # -> None:
        class Number(IntEnum): ...
        class String(str, Enum): ...
        class Plain(Enum): ...

    def test_wrong_enum_in_call(self):  # -> None:
        class Monochrome(Enum): ...
        class Gender(Enum): ...

    def test_wrong_enum_in_mixed_call(self):  # -> None:
        class Monochrome(IntEnum): ...
        class Gender(Enum): ...

    def test_mixed_enum_in_call_1(self):  # -> None:
        class Monochrome(IntEnum): ...
        class Gender(IntEnum): ...

    def test_mixed_enum_in_call_2(self):  # -> None:
        class Monochrome(Enum): ...
        class Gender(IntEnum): ...

    def test_flufl_enum(self):  # -> None:
        class Fluflnum(Enum): ...
        class MailManOptions(Fluflnum): ...

    def test_no_such_enum_member(self):  # -> None:
        class Color(Enum): ...

    def test_new_repr(self):  # -> None:
        class Color(Enum): ...

    def test_inherited_repr(self):  # -> None:
        class MyEnum(Enum): ...
        class MyIntEnum(int, MyEnum): ...

    def test_multiple_mixin_mro(self):  # -> None:
        class auto_enum(EnumMeta): ...

    def test_meta_reconfigure(self):  # -> None:
        class JSONEnumMeta(EnumMeta): ...
        class Country(JSONEnum): ...

    def test_subclasses_with_getnewargs(self):  # -> None:
        class NamedInt(int): ...
        class NEI(NamedInt, Enum): ...

    def test_subclasses_with_reduce(self):  # -> None:
        class NamedInt(int): ...
        class NEI(NamedInt, Enum): ...

    def test_subclasses_with_reduce_ex(self):  # -> None:
        class NamedInt(int): ...
        class NEI(NamedInt, Enum): ...

    def test_subclasses_without_direct_pickle_support(self):  # -> None:
        class NamedInt(int): ...
        class NEI(NamedInt, Enum): ...

    def test_subclasses_without_direct_pickle_support_using_name(self):  # -> None:
        class NamedInt(int): ...
        class NEI(NamedInt, Enum): ...

    def test_tuple_subclass(self):  # -> None:
        class SomeTuple(tuple, Enum): ...

    def test_inherited_new_from_enhanced_enum(self):  # -> None:
        class AutoNumber2(Enum): ...
        class Color(AutoNumber2): ...

    def test_inherited_new_from_mixed_enum(self):  # -> None:
        class AutoNumber3(IntEnum): ...
        class Color(AutoNumber3): ...

    def test_equality(self):  # -> None:
        class AlwaysEqual: ...
        class OrdinaryEnum(Enum): ...

    def test_ordered_mixin(self):  # -> None:
        class Grade(OrderedEnum): ...

    def test_missing_deprecated(self):  # -> None:
        class Label(Enum): ...

    def test_missing(self):  # -> None:
        class Label(Enum): ...

    def test_missing_name(self):  # -> None:
        class Label(Enum): ...

    def test_missing_value_bad_input(self):  # -> None:
        class Label(Enum): ...

    def test_missing_name_bad_return(self):  # -> None:
        class Label(Enum): ...

    def test_extending2(self):  # -> None:
        ...
    def test_extending3(self):  # -> None:
        class Shade(Enum): ...
        class Color(Shade): ...
        class MoreColor(Color): ...

    def test_extending5(self):  # -> None:
        class Color(Enum): ...

    CONTINUE = ...
    SWITCHING_PROTOCOLS = ...
    PROCESSING = ...
    def test_no_duplicates(self):  # -> None:
        ...
    def test_no_duplicates_kinda(self):  # -> None:
        class Silly(UniqueEnum): ...
        class Sillier(IntEnum, UniqueEnum): ...

    def test_init(self):  # -> None:
        class Planet(Enum): ...

    def test_init_and_shadowing_attribute(self):  # -> None:
        class SelectionEnum(str, Enum): ...
        class DeviceTypeSource(SelectionEnum): ...

    def test_nonhash_value(self):  # -> None:
        class AutoNumberInAList(Enum): ...
        class ColorInAList(AutoNumberInAList): ...

    def test_number_reset_and_order_cleanup(self):  # -> None:
        class Confused(Enum): ...

    def test_conflicting_types_resolved_in_new(self):  # -> None:
        class LabelledIntEnum(int, Enum): ...
        class LabelledList(LabelledIntEnum): ...

    def test_auto_number(self):  # -> None:
        class Color(Enum): ...

    def test_auto_name(self):  # -> None:
        class Color(Enum): ...

    def test_auto_name_inherit(self):  # -> None:
        class AutoNameEnum(Enum): ...
        class Color(AutoNameEnum): ...

    def test_auto_garbage(self):  # -> None:
        class Color(Enum): ...

    def test_auto_garbage_corrected(self):  # -> None:
        class Color(Enum): ...

    def test_duplicate_auto(self):  # -> None:
        class MoreDupes(Enum): ...
        class Dupes(Enum): ...

    def test_auto_value_with_auto(self):  # -> None:
        class SelectionEnum(Enum): ...
        class Test(SelectionEnum): ...

    def test_auto_value_with_autovalue(self):  # -> None:
        class SelectionEnum(Enum): ...
        class Test(SelectionEnum): ...

    def test_auto_and_kwds(self):  # -> None:
        class Item(Enum): ...

    def test_empty_with_functional_api(self):  # -> None:
        ...
    def test_auto_init(self):  # -> None:
        class Planet(Enum): ...

    def test_auto_init_with_value(self):  # -> None:
        class Color(Enum): ...

    def test_noalias(self):  # -> None:
        class Settings(Enum): ...

    def test_auto_and_init(self):  # -> None:
        class Field(int, Enum): ...

    def test_auto_and_start(self):  # -> None:
        class Field(IntEnum): ...

    def test_auto_and_init_and_some_values(self):  # -> None:
        class Field(int, Enum): ...

    def test_auto_and_init_w_value_and_too_many_values(self):  # -> None:
        ...
    def test_auto_and_init_and_some_complex_values(self):  # -> None:
        class Field(int, Enum): ...

    def test_auto_and_init_inherited(self):  # -> None:
        class AutoEnum(IntEnum): ...
        class Field(AutoEnum): ...

    def test_missing_value_error(self):  # -> None:
        ...
    def test_auto_and_enum(self):  # -> None:
        class Foo(aenum.Flag): ...

    def test_multiple_arg_auto(self):  # -> None:
        class AutoName(Enum): ...
        class Planet(AutoName): ...

    def test_auto_w_multiple_arg(self):  # -> None:
        class AutoName(Enum): ...
        class Planet(AutoName): ...

    def test_auto_gnv_and_init(self):  # -> None:
        class AutoName(Enum): ...
        class Planet(AutoName): ...

    def test_MultiValue_with_init_wo_value(self):  # -> None:
        class Color(Enum): ...

    def test_MultiValue_with_init_w_value(self):  # -> None:
        class Color(Enum): ...

    def test_MultiValue_with_init_wo_value_w_autonumber(self):  # -> None:
        class Color(AutoNumberEnum): ...

    def test_multivalue_and_autonumber_wo_init_wo_value(self):  # -> None:
        class Day(Enum): ...

    def test_multivalue_and_autonumber_wo_init_w_some_value(self):  # -> None:
        class Color(Enum): ...

    def test_combine_new_settings_with_old_settings(self):  # -> None:
        class Auto(Enum): ...

    def test_timedelta(self):  # -> None:
        class Period(timedelta, Enum):
            """
            different lengths of time
            """

            ...

    def test_skip(self):  # -> None:
        class enumA(Enum):
            @skip
            class enumB(Enum): ...

            @skip
            class enumC(Enum): ...

    def test_nonmember(self):  # -> None:
        class enumA(Enum):
            @nonmember
            class enumB(Enum): ...

            @nonmember
            class enumC(Enum): ...

    def test_member_with_external_functions(self):  # -> None:
        class Func(Enum): ...

    def test_member_with_internal_functions(self):  # -> None:
        class Func(Enum): ...

    def test_constantness_of_constants(self):  # -> None:
        class Universe(Enum): ...

    def test_math_and_stuff_with_constants(self):  # -> None:
        class Universe(Enum): ...

    def test_constant_with_auto_is_updated(self):  # -> None:
        class Fruit(Flag): ...

    def test_order_as_function(self):  # -> None:
        class TestSequence(Enum): ...
        class TestSequence(Enum): ...

    def test_order_as_function_in_subclass(self):  # -> None:
        class Parent(Enum): ...
        class Child(Parent): ...

    def test_multiple_mixin(self):  # -> None:
        class MaxMixin: ...
        class StrMixin: ...
        class SomeEnum(Enum): ...
        class AnotherEnum(Enum): ...
        class Color(MaxMixin, Enum): ...
        class Color(MaxMixin, StrMixin, Enum): ...
        class Color(StrMixin, MaxMixin, Enum): ...
        class CoolColor(StrMixin, SomeEnum, Enum): ...
        class CoolerColor(StrMixin, AnotherEnum, Enum): ...
        class CoolestColor(StrMixin, SomeEnum, AnotherEnum): ...
        class ConfusedColor(StrMixin, AnotherEnum, SomeEnum): ...
        class ReformedColor(StrMixin, IntEnum, SomeEnum, AnotherEnum): ...

    def test_multiple_inherited_mixin(self):  # -> None:
        @unique
        class Decision1(StrEnum): ...

        class MyEnum(StrEnum): ...

        @unique
        class Decision2(MyEnum): ...

    def test_value_auto_assign(self):  # -> None:
        class Some(Enum): ...

    def test_enum_of_types(self):  # -> None:
        """Support using Enum to refer to types deliberately."""
        class MyTypes(Enum): ...
        class Foo: ...
        class Bar: ...
        class MyTypes2(Enum): ...
        class SpamEnumNotInner: ...
        class SpamEnum(Enum): ...

    if PY2:
        def test_nested_classes_in_enum_do_become_members(self):  # -> None:
            class Outer(Enum):
                class Inner(Enum): ...

        def test_really_nested_classes_in_enum_do_become_members(self):  # -> None:
            class Outer(Enum):
                class Inner(Enum): ...

    def test_nested_classes_in_enum_are_skipped_with_skip(self):  # -> None:
        """Support locally-defined nested classes using @skip"""
        class Outer(Enum):
            @skip
            class Inner(Enum): ...

    def test_really_nested_classes_in_enum_are_skipped_with_skip(self):  # -> None:
        """Support locally-defined nested classes using @skip"""
        class Outer(Enum):
            @skip
            class Inner(Enum): ...

    def test_enum_call_without_arg(self):  # -> None:
        class Color(Enum): ...

    def test_init_subclass(self):  # -> None:
        class MyEnum(Enum): ...
        class TheirEnum(MyEnum): ...
        class WhoseEnum(TheirEnum): ...
        class NoEnum(WhoseEnum): ...
        class OurEnum(MyEnum): ...
        class WhereEnum(OurEnum): ...
        class NeverEnum(WhereEnum): ...

    def test_init_exception(self):  # -> None:
        class Base: ...

    def test_namedtuple_as_value(self):  # -> None:
        class NTEnum(Enum): ...

    def test_gnv_is_static(self):  # -> None:
        class LazyGNV(Enum): ...
        class BusyGNV(Enum): ...

    def test_namedtuple_as_value(self):  # -> None:
        class NTEnum(Enum): ...

    def test_multiple_auto_assignment(self):  # -> None:
        class Many(Enum): ...

class TestStrEnum(TestCase):
    def test_set_name(self):  # -> None:
        class Descriptor: ...
        class AnEnum(Enum): ...

    def test_private_names(self):  # -> None:
        class Private(Enum): ...

    def test_strenum_inherited_methods(self):  # -> None:
        class phy(StrEnum): ...

    def test_strict_strenum(self):  # -> None:
        class Either(StrEnum): ...
        class Lower(LowerStrEnum): ...
        class Upper(UpperStrEnum): ...

    def test_init_subclass(self):  # -> None:
        class MyEnum(StrEnum): ...
        class TheirEnum(MyEnum): ...
        class WhoseEnum(TheirEnum): ...
        class NoEnum(WhoseEnum): ...
        class OurEnum(MyEnum): ...
        class WhereEnum(OurEnum): ...
        class NeverEnum(WhereEnum): ...

class TestFlag(TestCase):
    """Tests of the Flags."""
    def setUp(self):  # -> None:
        class Perm(Flag): ...
        class Color(Flag): ...
        class Fun(Flag): ...
        class TermColor(str, Flag): ...
        class Open(Flag): ...

    def test_closed_invert_expectations(self):  # -> None:
        class ClosedAB(Flag): ...
        class ClosedXYZ(Flag): ...

    def test_open_invert_expectations(self):  # -> None:
        class OpenAB(Flag): ...
        class OpenXYZ(Flag): ...

    def test_assigned_negative_value(self):  # -> None:
        class X(Flag): ...
        class Y(Flag): ...

    def test_set_name(self):  # -> None:
        class Descriptor: ...
        class AnEnum(Enum): ...

    def test_new_with_keywords(self):  # -> None:
        class Huh(IntFlag): ...

    def test_private_names(self):  # -> None:
        class Private(Enum): ...

    def test_auto_alias(self):  # -> None:
        ...
    def test_str_is_str_str(self):  # -> None:
        ...
    def test_membership(self):  # -> None:
        ...
    def test_member_contains(self):  # -> None:
        ...
    def test_member_length(self):  # -> None:
        ...
    def test_number_reset_and_order_cleanup(self):  # -> None:
        class Confused(Flag): ...

    def test_str(self):  # -> None:
        ...
    def test_repr(self):  # -> None:
        ...
    def test_name_lookup(self):  # -> None:
        ...
    def test_or(self):  # -> None:
        ...
    def test_and(self):  # -> None:
        ...
    def test_xor(self):  # -> None:
        ...
    def test_invert(self):  # -> None:
        ...
    def test_bool(self):  # -> None:
        ...
    def test_doc_flag(self):  # -> None:
        class DocFlag(Flag): ...
        class AddressSegment(DocFlag): ...

    def test_iteration(self):  # -> None:
        ...
    def test_member_iteration(self):  # -> None:
        ...
    def test_programatic_function_string(self):  # -> None:
        ...
    def test_programatic_function_string_with_start(self):  # -> None:
        ...
    def test_programatic_function_string_list(self):  # -> None:
        ...
    def test_programatic_function_iterable(self):  # -> None:
        ...
    def test_programatic_function_from_dict(self):  # -> None:
        ...
    def test_programatic_function_empty_list(self):  # -> None:
        ...
    def test_programatic_function_empty_tuple(self):  # -> None:
        ...
    def test_pickle(self):  # -> None:
        ...
    def test_containment(self):  # -> None:
        ...
    def test_auto_number(self):  # -> None:
        class Color(Flag): ...

    def test_auto_number_garbage(self):  # -> None:
        ...
    def test_auto_w_pending(self):  # -> None:
        class Required(Flag): ...

    def test_duplicate_auto(self):  # -> None:
        class Dupes(Enum): ...

    def test_bizarre(self):  # -> None:
        class Bizarre(Flag): ...

    def test_skipped_flag(self):  # -> None:
        class SkipFlag(Flag): ...
        class SkipIntFlag(IntFlag): ...

    def test_multiple_mixin(self):  # -> None:
        class AllMixin: ...
        class StrMixin: ...
        class Color(AllMixin, Flag): ...
        class Color(AllMixin, StrMixin, Flag): ...
        class Color(StrMixin, AllMixin, Flag): ...

    @unittest.skipUnless(threading, "Threading required for this test.")
    def test_unique_composite(self):  # -> None:
        class TestFlag(Flag): ...

    def test_init_with_autovalue_and_generate_next_value(self):  # -> None:
        class Color(Flag): ...

    def test_autovalue_and_generate_next_value(self):  # -> None:
        class Color(str, Flag): ...

    def test_subclass(self):  # -> None:
        class Color(str, Flag): ...

    def test_sub_subclass_1(self):  # -> None:
        class StrFlag(str, Flag): ...
        class Color(StrFlag): ...

    def test_sub_subclass_2(self):  # -> None:
        class StrFlag(str, Flag): ...
        class Color(StrFlag): ...

    def test_sub_subclass_3(self):  # -> None:
        class StrFlag(str, Flag): ...
        class Color(StrFlag): ...

    def test_sub_subclass_4(self):  # -> None:
        class StrFlag(str, Flag): ...
        class Color(StrFlag): ...

    def test_sub_subclass_with_new_new(self):  # -> None:
        class StrFlag(str, Flag): ...
        class Color(StrFlag): ...

    def test_subclass_with_default_new(self):  # -> None:
        class MyFlag(str, Flag): ...

    def test_subclass_a_bunch(self):  # -> None:
        class Color(str, Flag): ...

    def test_init_subclass(self):  # -> None:
        class MyEnum(Flag): ...
        class TheirEnum(MyEnum): ...
        class WhoseEnum(TheirEnum): ...
        class NoEnum(WhoseEnum): ...
        class OurEnum(MyEnum): ...
        class WhereEnum(OurEnum): ...
        class NeverEnum(WhereEnum): ...

    def test_int_long_conversion(self):  # -> None:
        class Perm(Flag): ...

    def test_none_member(self):  # -> None:
        class FlagWithNoneMember(Flag): ...

class TestIntFlag(TestCase):
    """Tests of the IntFlags."""
    def setUp(self):  # -> None:
        class Perm(IntFlag): ...
        class Color(IntFlag): ...

        class Open(IntFlag):
            "not a good flag candidate"

            ...

    def test_closed_invert_expectations(self):  # -> None:
        class ClosedAB(IntFlag): ...
        class ClosedXYZ(IntFlag): ...

    def test_open_invert_expectations(self):  # -> None:
        class OpenAB(IntFlag): ...
        class OpenXYZ(IntFlag): ...

    def test_assigned_negative_value(self):  # -> None:
        class X(IntFlag): ...
        class X(IntFlag): ...
        class Y(IntFlag): ...
        class Y(IntFlag): ...

    def test_set_name(self):  # -> None:
        class Descriptor: ...
        class AnEnum(Enum): ...

    def test_private_names(self):  # -> None:
        class Private(Enum): ...

    def test_membership(self):  # -> None:
        ...
    def test_member_contains(self):  # -> None:
        ...
    def test_name_lookup(self):  # -> None:
        ...
    def test_type(self):  # -> None:
        ...
    def test_str(self):  # -> None:
        ...
    def test_repr_strict(self):  # -> None:
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...

    def test_repr_conform(self):  # -> None:
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...

    def test_repr_eject(self):  # -> None:
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...

    def test_repr_keep(self):  # -> None:
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...
        class Perm(IntFlag): ...

    def test_repr_open(self):  # -> None:
        class Open(IntFlag):
            "not a good flag candidate"

            ...

        class Open(IntFlag):
            "not a good flag candidate"

            ...

        class Open(IntFlag):
            "not a good flag candidate"

            ...

    def test_or(self):  # -> None:
        ...
    def test_and(self):  # -> None:
        ...
    def test_xor(self):  # -> None:
        ...
    def test_invert(self):  # -> None:
        ...
    def test_iter(self):  # -> None:
        ...
    def test_programatic_function_string(self):  # -> None:
        ...
    def test_programatic_function_string_with_start(self):  # -> None:
        ...
    def test_programatic_function_string_list(self):  # -> None:
        ...
    def test_programatic_function_iterable(self):  # -> None:
        ...
    def test_programatic_function_from_dict(self):  # -> None:
        ...
    def test_containment(self):  # -> None:
        ...
    def test_bool(self):  # -> None:
        ...
    def test_multiple_mixin(self):  # -> None:
        class AllMixin: ...
        class StrMixin: ...
        class Color(AllMixin, IntFlag): ...
        class Color(AllMixin, StrMixin, IntFlag): ...
        class Color(StrMixin, AllMixin, IntFlag): ...

    @unittest.skipUnless(threading, "Threading required for this test.")
    def test_unique_composite(self):  # -> None:
        class TestFlag(IntFlag): ...

    def test_init_subclass(self):  # -> None:
        class MyEnum(IntEnum): ...
        class TheirEnum(MyEnum): ...
        class WhoseEnum(TheirEnum): ...
        class NoEnum(WhoseEnum): ...
        class OurEnum(MyEnum): ...
        class WhereEnum(OurEnum): ...
        class NeverEnum(WhereEnum): ...

class TestEmptyAndNonLatinStrings(unittest.TestCase):
    def test_empty_string(self):  # -> None:
        ...
    def test_non_latin_character_string(self):  # -> None:
        ...
    def test_non_latin_number_string(self):  # -> None:
        ...

class TestUnique(TestCase):
    """2.4 doesn't allow class decorators, use function syntax."""
    def test_unique_clean(self):  # -> None:
        class Clean(Enum): ...
        class Cleaner(IntEnum): ...

    def test_unique_dirty(self):  # -> None:
        class Dirty(Enum): ...
        class Dirtier(IntEnum): ...

    def test_unique_with_name(self):  # -> None:
        @unique
        class Silly(Enum): ...

        @unique
        class Sillier(IntEnum): ...

class TestNamedTuple(TestCase):
    def test_explicit_indexing(self):  # -> None:
        class Person(NamedTuple): ...

    def test_implicit_indexing(self):  # -> None:
        class Person(NamedTuple): ...

    def test_mixed_indexing(self):  # -> None:
        class Person(NamedTuple): ...

    def test_issubclass(self):  # -> None:
        class Person(NamedTuple): ...

    def test_isinstance(self):  # -> None:
        class Person(NamedTuple): ...

    def test_explicit_indexing_after_functional_api(self):  # -> None:
        ...
    def test_implicit_indexing_after_functional_api(self):  # -> None:
        ...
    def test_mixed_indexing_after_functional_api(self):  # -> None:
        ...
    def test_issubclass_after_functional_api(self):  # -> None:
        ...
    def test_isinstance_after_functional_api(self):  # -> None:
        ...
    def test_creation_with_all_keywords(self):  # -> None:
        ...
    def test_creation_with_some_keywords(self):  # -> None:
        ...
    def test_custom_new(self):  # -> None:
        class Book(NamedTuple): ...

    def test_defaults_in_class(self):  # -> None:
        class Character(NamedTuple): ...

    def test_defaults_in_class_that_are_falsey(self):  # -> None:
        class Point(NamedTuple): ...

    def test_pickle_namedtuple_with_module(self):  # -> None:
        ...
    def test_pickle_namedtuple_without_module(self):  # -> None:
        ...
    def test_subclassing(self):  # -> None:
        ...
    def test_contains(self):  # -> None:
        ...
    def test_fixed_size(self):  # -> None:
        class Book(NamedTuple): ...

    def test_minimum_size(self):  # -> None:
        class Book(NamedTuple): ...

    def test_variable_size(self):  # -> None:
        class Book(NamedTuple): ...

    def test_combining_namedtuples(self):  # -> None:
        class Point(NamedTuple): ...
        class Color(NamedTuple): ...

        class Pixel2(Point, Color):
            "a colored dot"

            ...

        class Pixel3(Point): ...

    def test_inherit_from_existing(self):  # -> None:
        class OERecTuple(NamedTuple): ...

    def test_function_api_type(self):  # -> None:
        class Tester(NamedTuple): ...

    def test_asdict(self):  # -> None:
        class Point(NamedTuple): ...
        class Color(NamedTuple): ...

    def test_make(self):  # -> None:
        class Point(NamedTuple): ...

    def test_replace(self):  # -> None:
        class Color(NamedTuple): ...

    def test_index_by_name(self):  # -> None:
        class Person(NamedTuple): ...

class TestNamedConstant(TestCase):
    def test_constantness(self):  # -> None:
        class K(NamedConstant): ...

    def test_duplicates(self):  # -> None:
        class CardNumber(NamedConstant): ...

    def test_extend_constants(self):  # -> None:
        class CardSuit(NamedConstant): ...

    def test_constant_with_docstring(self):  # -> None:
        class Stuff(NamedConstant): ...

    def test_deep_copy(self):  # -> None:
        class APITypes(aenum.Constant): ...

    def test_subclass_w_same_value(self):  # -> None:
        class Foo(aenum.Constant): ...
        class Bar(aenum.Constant): ...

class TestStarImport(TestCase):
    def test_all_exports_names(self):  # -> None:
        ...

class TestStackoverflowAnswers(TestCase):
    def test_self_referential_directions(self):  # -> None:
        class Directions(Enum): ...

    def test_self_referential_rock_paper_scissors(self):  # -> None:
        class RPS(Enum): ...

    def test_arduino_headers(self):  # -> None:
        class CHeader(Enum): ...
        class Arduino(CHeader): ...

    def test_lowercase_compare(self):  # -> None:
        class CompareLowerCase(Enum): ...
        class LabelEnum(CompareLowerCase, StrEnum): ...

class TestExtendEnum(TestCase):
    def test_extend_enum_plain(self):  # -> None:
        class Color(Enum): ...

    def test_extend_enum_alias(self):  # -> None:
        class Color(Enum): ...

    def test_extend_enum_unique(self):  # -> None:
        class Color(UniqueEnum): ...

    def test_extend_enum_shadow_property(self):  # -> None:
        class Color(Enum): ...

    def test_extend_enum_shadow_base(self):  # -> None:
        class hohum: ...
        class Color(hohum, Enum): ...

    def test_extend_enum_multivalue(self):  # -> None:
        class Color(MultiValueEnum): ...

    def test_extend_enum_multivalue_alias(self):  # -> None:
        class Color(MultiValueEnum): ...

    def test_extend_enum_multivalue_str(self):  # -> None:
        class M(str, MultiValueEnum): ...

    def test_extend_intenum(self):  # -> None:
        class Index(IntEnum): ...

    def test_extend_multi_init(self):  # -> None:
        ...
    def test_extend_flag(self):  # -> None:
        class Color(Flag): ...

    def test_extend_flag_backwards(self):  # -> None:
        class Color(Flag): ...

    def test_extend_intflag(self):  # -> None:
        class Color(IntFlag): ...

    def test_extend_intflag_backwards(self):  # -> None:
        class Color(IntFlag): ...

    def test_extend_strenum(self):  # -> None:
        class Color(StrEnum): ...

class TestIssues(TestCase):
    def test_auto_multi_int(self):  # -> None:
        class Measurement(int, MultiValueEnum, AddValueEnum): ...

    def test_auto_kwds(self):  # -> None:
        class Item(Enum): ...

    def test_auto_kwds_and_gnv(self):  # -> None:
        class Item(Enum): ...

    def test_extend_flag(self):  # -> None:
        class FlagTest(Flag): ...

    def test_extend_unhashable(self):  # -> None:
        class TestEnum(Enum): ...

CONVERT_TEST_NAME_D = ...
CONVERT_TEST_NAME_C = ...
CONVERT_TEST_NAME_B = ...
CONVERT_TEST_NAME_A = ...
CONVERT_TEST_NAME_E = ...
CONVERT_TEST_NAME_F = ...
CONVERT_TEST_SIGABRT = ...
CONVERT_TEST_SIGIOT = ...
CONVERT_TEST_EIO = ...
CONVERT_TEST_EBUS = ...
CONVERT_STRING_TEST_NAME_D = ...
CONVERT_STRING_TEST_NAME_C = ...
CONVERT_STRING_TEST_NAME_B = ...
CONVERT_STRING_TEST_NAME_A = ...
CONVERT_STRING_TEST_NAME_E = ...
CONVERT_STRING_TEST_NAME_F = ...
CONVERT_STR_TEST_2 = ...
CONVERT_STR_TEST_1 = ...
UNCOMPARABLE_A = ...
UNCOMPARABLE_C = ...
UNCOMPARABLE_B = ...
COMPLEX_C = ...
COMPLEX_A = ...
COMPLEX_B = ...

class TestConvert(TestCase):
    def tearDown(self):  # -> None:
        ...
    def test_convert_value_lookup_priority(self):  # -> None:
        ...
    def test_convert_int(self):  # -> None:
        ...
    @unittest.skipUnless(PY3, "everything is comparable on Python 2")
    def test_convert_uncomparable(self):  # -> None:
        ...
    @unittest.skipUnless(PY3, "everything is comparable on Python 2")
    def test_convert_complex(self):  # -> None:
        ...
    def test_convert_str(self):  # -> None:
        ...
    def test_convert_repr_and_str(self):  # -> None:
        ...

def enum_dir(cls):  # -> list[Any] | list[str | Any]:
    ...
def member_dir(member):  # -> list[str]:
    ...

if __name__ == "__main__":
    tempdir = ...
    test = ...
    test = unittest.main(exit=False)
