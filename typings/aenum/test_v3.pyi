# ruff: noqa
# sourcery: skip
# type: ignore
"""This type stub file was generated by pyright."""

import unittest

from unittest import TestCase

import pyparsing

from . import (
    PY3_3,
    PY3_4,
    PY3_5,
    PY3_11,
    AutoNumberEnum,
    Enum,
    EnumMeta,
    IntEnum,
    MagicValue,
    UniqueEnum,
    pyver,
)
from ._enum import (
    StdlibEnum,
    StdlibEnumMeta,
    StdlibFlag,
    StdlibIntEnum,
    StdlibIntFlag,
    StdlibStrEnum,
)

class TestEnumV3(TestCase):
    def setUp(self) -> None:  # -> None:
        class Season(Enum): ...
        class Konstants(float, Enum): ...
        class Grades(IntEnum): ...
        class Directional(str, Enum): ...
        class Holiday(date, Enum): ...

    @unittest.skipUnless(StdlibEnumMeta, "Stdlib enum not available")
    def test_stdlib_inheritence(self):  # -> None:
        ...
    @unittest.skipUnless(StdlibEnumMeta, "Stdlib enum not available")
    def test_stdlib_bad_getattribute(self) -> None:  # -> None:
        class BadEnumType(StdlibEnumMeta): ...
        class OkayEnum(StdlibEnum, metaclass=BadEnumType): ...

    @unittest.skipUnless(pyver >= PY3_5, "__qualname__ requires python 3.5 or greater")
    def test_pickle_enum_function_with_qualname(self):  # -> None:
        ...
    def test_auto_init(self) -> None:  # -> None:
        ...
    def test_auto_init_with_value(self) -> None:  # -> None:
        ...
    def test_auto_turns_off(self):  # -> None:
        ...
    def test_magic(self) -> None:  # -> None:
        ...
    def test_ignore_not_overridden(self):  # -> None:
        ...
    def test_magic_start(self) -> None:  # -> None:
        ...
    def test_dir_on_class(self):  # -> None:
        ...
    def test_dir_on_item(self):  # -> None:
        ...
    def test_dir_with_added_behavior(self) -> None:  # -> None:
        ...
    def test_dir_on_sub_with_behavior_on_super(self) -> None:  # -> None:
        class SuperEnum(Enum): ...
        class SubEnum(SuperEnum): ...

    def test_members_are_always_ordered(self) -> None:  # -> None:
        ...
    def test_comparisons(self) -> None:  # -> None:
        ...
    def test_duplicate_name(self):  # -> None:
        ...
    def test_duplicate_value_with_unique(self):  # -> None:
        ...
    def test_duplicate_value_with_noalias(self) -> None:  # -> None:
        ...
    def test_noalias_value_lookup(self) -> None:  # -> None:
        ...
    def test_multivalue(self) -> None:  # -> None:
        ...
    def test_multivalue_with_duplicate_values(self):  # -> None:
        ...
    def test_multivalue_with_duplicate_values_and_noalias(self):  # -> None:
        ...
    def test_multivalue_and_auto(self):  # -> None:
        ...
    def test_autonumber_and_init(self) -> None:  # -> None:
        ...
    def test_autovalue_and_init(self) -> None:  # -> None:
        ...
    def test_autonumber_and_start(self) -> None:  # -> None:
        ...
    def test_autonumber_and_init_and_some_values(self) -> None:  # -> None:
        ...
    def test_autonumber_with_irregular_values(self) -> None:  # -> None:
        class Point(AutoNumberEnum, init="x y"): ...
        class Color(AutoNumberEnum, init="__doc__"): ...

    def test_autonumber_and_property(self):  # -> None:
        ...
    def test_autoenum(self) -> None:  # -> None:
        ...
    def test_autoenum_with_str(self) -> None:  # -> None:
        ...
    def test_autoenum_and_default_ignore(self) -> None:  # -> None:
        ...
    def test_autonumber_and_overridden_ignore(self):  # -> None:
        ...
    def test_autonumber_and_multiple_assignment(self) -> None:  # -> None:
        ...
    def test_multivalue_and_autonumber_inherited(self) -> None:  # -> None:
        ...
    def test_combine_new_settings_with_old_settings(self) -> None:  # -> None:
        ...
    def test_timedelta(self) -> None:  # -> None:
        ...
    def test_extend_enum_plain(self) -> None:  # -> None:
        ...
    def test_extend_enum_shadow(self) -> None:  # -> None:
        ...
    def test_extend_enum_generate(self) -> None:  # -> None:
        ...
    def test_extend_enum_unique_with_duplicate(self):  # -> None:
        ...
    def test_extend_enum_multivalue_with_duplicate(self):  # -> None:
        ...
    def test_extend_enum_noalias_with_duplicate(self) -> None:  # -> None:
        ...
    def test_no_duplicates(self):  # -> None:
        ...
    def test_no_duplicates_kinda(self) -> None:  # -> None:
        class Silly(UniqueEnum): ...
        class Sillier(IntEnum, UniqueEnum): ...

    def test_auto_number(self) -> None:  # -> None:
        ...
    def test_auto_name(self) -> None:  # -> None:
        ...
    def test_auto_name_inherit(self) -> None:  # -> None:
        class AutoNameEnum(Enum): ...
        class Color(AutoNameEnum, settings=MagicValue): ...

    def test_auto_garbage(self) -> None:  # -> None:
        ...
    def test_auto_garbage_corrected(self) -> None:  # -> None:
        ...
    def test_duplicate_auto(self) -> None:  # -> None:
        ...
    def test_order_as_function(self) -> None:  # -> None:
        class TestSequence(Enum): ...
        class TestSequence(Enum): ...

    if pyver >= PY3_3:
        def test_missing(self) -> None:  # -> None:
            ...

    def test_enum_of_types(self) -> None:  # -> None:
        class MyTypes(Enum): ...
        class Foo: ...
        class Bar: ...
        class MyTypes2(Enum): ...
        class SpamEnumNotInner: ...
        class SpamEnum(Enum): ...

    def test_nested_classes_in_enum_do_not_create_members(self) -> None:  # -> None:
        ...

    if pyver == PY3_4:
        def test_class_nested_enum_and_pickle_protocol_four(self) -> None:  # -> None:
            ...

    else:
        def test_class_nested_enum_and_pickle_protocol_four(self) -> None:  # -> None:
            ...

    if pyver >= PY3_4:
        def test_enum_injection(self) -> None:  # -> None:
            ...
        def test_subclasses_with_getnewargs_ex(self) -> None:  # -> None:
            class NamedInt(int): ...
            class NEI(NamedInt, Enum): ...

    def test_multiple_superclasses_repr(self) -> None:  # -> None:
        class _EnumSuperClass(metaclass=EnumMeta): ...
        class E(_EnumSuperClass, Enum): ...

class TestOrderV3(TestCase):
    def test_same_members(self) -> None:  # -> None:
        ...
    def test_same_members_with_aliases(self) -> None:  # -> None:
        ...
    def test_same_members_wrong_order(self):  # -> None:
        ...
    def test_order_has_extra_members(self):  # -> None:
        ...
    def test_order_has_extra_members_with_aliases(self):  # -> None:
        ...
    def test_enum_has_extra_members(self):  # -> None:
        ...
    def test_enum_has_extra_members_with_aliases(self):  # -> None:
        ...
    def test_same_members_flag(self) -> None:  # -> None:
        ...
    def test_same_members_with_aliases_flag(self) -> None:  # -> None:
        ...
    def test_same_members_wrong_order_falg(self):  # -> None:
        ...
    def test_order_has_extra_members_flag(self):  # -> None:
        ...
    def test_order_has_extra_members_with_aliases_flag(self):  # -> None:
        ...
    def test_enum_has_extra_members_flag(self):  # -> None:
        ...
    def test_enum_has_extra_members_with_aliases_flag(self):  # -> None:
        ...

class TestNamedTupleV3(TestCase):
    def test_fixed_size(self) -> None:  # -> None:
        ...
    def test_minimum_size(self) -> None:  # -> None:
        ...
    def test_variable_size(self) -> None:  # -> None:
        ...

class TestStackoverflowAnswersV3(TestCase):
    def test_self_referential_directions(self) -> None:  # -> None:
        ...
    def test_self_referential_rock_paper_scissors(self) -> None:  # -> None:
        ...
    def test_arduino_headers(self) -> None:  # -> None:
        class CHeader(Enum): ...
        class Arduino(CHeader): ...

    def test_create_C_like_Enum(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(pyparsing, "pyparsing not installed")
    def test_c_header_scanner(self) -> None:  # -> None:
        class CPPEnumType(EnumMeta): ...
        class CPPEnum(IntEnum, metaclass=CPPEnumType): ...
        class Hello(CPPEnum): ...
        class Blah(CPPEnum): ...

class TestIssuesV3(TestCase):
    def test_auto_multi_int_1(self) -> None:  # -> None:
        ...
    def test_auto_multi_int_2(self) -> None:  # -> None:
        ...
    def test_extend_enum_with_init(self) -> None:  # -> None:
        ...

class TestExtendEnumV3(TestCase):
    def test_extend_enum_plain(self) -> None:  # -> None:
        ...
    def test_extend_enum_alias(self) -> None:  # -> None:
        ...
    def test_extend_enum_unique(self) -> None:  # -> None:
        ...
    def test_extend_enum_shadow_property(self) -> None:  # -> None:
        ...
    def test_extend_enum_shadow_base(self) -> None:  # -> None:
        class hohum: ...
        class Color(hohum, Enum): ...

    def test_extend_enum_multivalue(self) -> None:  # -> None:
        ...
    def test_extend_enum_multivalue_alias(self) -> None:  # -> None:
        ...
    def test_extend_enum_multivalue_str(self) -> None:  # -> None:
        ...
    def test_extend_intenum(self) -> None:  # -> None:
        ...
    def test_extend_multi_init(self) -> None:  # -> None:
        ...
    def test_extend_flag(self) -> None:  # -> None:
        ...
    def test_extend_flag_backwards(self) -> None:  # -> None:
        ...
    def test_extend_intflag(self) -> None:  # -> None:
        ...
    def test_extend_intflag_backwards(self) -> None:  # -> None:
        ...
    def test_extend_strenum(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibEnum, "Stdlib Enum not available")
    def test_extend_enum_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibEnum, "Stdlib Enum not available")
    def test_extend_enum_plain_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibEnum, "Stdlib Enum not available")
    def test_extend_enum_alias_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibEnum, "Stdlib Enum not available")
    def test_extend_enum_shadow_property_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibEnum, "Stdlib Enum not available")
    def test_extend_enum_shadow_base_stdlib(self) -> None:  # -> None:
        class hohum: ...
        class Color(hohum, StdlibEnum): ...

    @unittest.skipUnless(StdlibIntEnum, "Stdlib IntEnum not available")
    def test_extend_intenum_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibIntEnum, "Stdlib IntEnum not available")
    def test_extend_multi_init_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibFlag, "Stdlib Flag not available")
    def test_extend_flag_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibFlag and pyver < PY3_11, "Stdlib Flag not available")
    def test_extend_flag_backwards_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibFlag and pyver >= PY3_11, "Stdlib Flag not available")
    def test_extend_flag_backwards_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibIntFlag, "Stdlib IntFlag not available")
    def test_extend_intflag_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibIntFlag, "Stdlib IntFlag not available")
    def test_extend_intflag_backwards_stdlib(self) -> None:  # -> None:
        ...
    @unittest.skipUnless(StdlibStrEnum, "Stdlib StrEnum not available")
    def test_extend_strenum_stdlib(self) -> None:  # -> None:
        ...
    def test_extend_error(self) -> None:  # -> None:
        ...

if __name__ == "__main__": ...
